from colorama import init, Fore
from TickTacBot import TicTacBot
from tqdm import tqdm
from rich.console import Console
from rich.progress import SpinnerColumn, Progress
import pygame
import time
import audio

pygame.mixer.init()
init()

# try:
sound_ai = pygame.mixer.Sound("audio\/ai.wav")
sound_color = pygame.mixer.Sound("audio\colors.wav")
sound_skin = pygame.mixer.Sound("audio\skins.wav")
sound_x = pygame.mixer.Sound("audio\/x.wav") 
sound_o = pygame.mixer.Sound("audio\o.wav") 
sound_gg = pygame.mixer.Sound("audio\gg.wav") 
sound_win = pygame.mixer.Sound("audio\win.wav")
# except:
#     print(f"{Fore.RED}–ó–ê–ü–£–°–ö–ê–ô –ö–û–î –ß–ï–†–ï–ó –¢–ï–†–ú–ò–ù–ê–õ –ï–°–õ–ò –ù–ï–¢ –ó–í–£–ö–ê –ï–ë–ê–ù–´–ô –ö–û–ú–ü–ò–õ–Ø–¢–û–† –í–ò–ï–ë–´–í–ê–ï–¢–¨–°–Ø, –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ü–ï–†–ï–ô–î–´ –í–ù–£–ñ–ù–£–Æ –î–ò–†–ï–ö–¢–û–†–ò–Æ –ì–î–ï –õ–ï–ñ–ò–¢ –û–°–ù–û–í–ù–û–ô –§–ê–ô–õ –î–õ–Ø –ó–ê–ü–£–°–ö–ê –ù–ê–ü–ò–®–ò python Game.py {Fore.RESET}")
        

def play_saund_win(sound_win):
    sound_win.play()
    time.sleep(5)
def play_saund_o(sound_o):
    sound_o.play()
    time.sleep(1.5)
def play_saund_x(sound_x):
    sound_x.play()
    time.sleep(1)
def play_saund_ai(sound_ai):
    sound_ai.play()
    time.sleep(1)
def play_saund_skins(sound_skin):
    sound_skin.play()
    time.sleep(1)
def play_saund_colors(sound_color):
    sound_color.play()
    time.sleep(1)
def play_saund_final(sound_gg):
    sound_gg.play()
    time.sleep(7)

bot = None
human_player = "X"

# –ü–æ–ª–µ
board = [" "] * 9

# –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
wins = [
    (0, 1, 2), (3, 4, 5), (6, 7, 8),
    (0, 3, 6), (1, 4, 7), (2, 5, 8),
    (0, 4, 8), (2, 4, 6)
]

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
colors = {
    "1": Fore.RED,
    "2": Fore.BLUE,
    "3": Fore.YELLOW,
    "4": Fore.GREEN,
    "5": Fore.MAGENTA,
    "6": Fore.CYAN,
    "7": Fore.WHITE,
}

# def choose_game_mode():
#     while True:
#         chois = input("1 - –ò–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞, 2 - –ò–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞?: ")
#         if chois == "1" or chois == "2":
#             return chois
#         print(f"{Fore.RED} ERORR! {Fore.RESET} –í–≤–µ–¥–∏—Ç–µ 1 (–¥—Ä—É–≥) –∏–ª–∏ 2 (–±–æ—Ç). ")

# def choose_bot_difficulty():
#     while True:
#         difficulty = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞: Easy (1), Normal (Coming soon...), Hard (Coming soon...): ")
#         if difficulty == "1":
#             return difficulty
#         print(f"{Fore.RED} ERORR! {Fore.RESET} –í–≤–µ–¥–∏—Ç–µ 1 (Easy). ")

# game_mode = choose_game_mode()
# bot_difficulty = None

# if game_mode == "2":
#     bot_difficulty = choose_bot_difficulty()
for i in tqdm(range(50), desc="Loading", unit="iterations"):
    time.sleep(0.05)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
print("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

drinks = 3
counter = 0

while counter < drinks:
    mode = input("1 - –ò–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞, 2 - –ò–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞?: ")
    play_saund_ai(sound_ai)
    if mode == "2":
        bot = TicTacBot("O")
        print(f"{Fore.GREEN} –í—ã –±—É–¥—Ç–µ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞. –ë–æ—Ç –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –∑–∞ 'O'. {Fore.RESET}")
        break
    elif mode == "1":
        print(f"{Fore.GREEN}–í—ã –±—É–¥–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞. –ò–≥—Ä–æ–∫ 1 –±—É–¥–µ—Ç –∏–≥—Ä–∞—Ç—å –∑–∞ 'X', –∏–≥—Ä–æ–∫ 2 –∑–∞ 'O'. {Fore.RESET}")
        break
    else:
        print(f"{Fore.RED} ERORR! {Fore.RESET} –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
        counter += 1

if counter == 3:
    print(f"{Fore.RED} –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤–∞–º –ø–æ–∫–∞ —Ä–∞–Ω–æ –∏–≥—Ä–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏.")
    exit()

# –í—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
print("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å–∫–∏–Ω–∞:\n1 - –ö—Ä–∞—Å–Ω—ã–π\n2 - –°–∏–Ω–∏–π\n3 - –ñ—ë–ª—Ç—ã–π\n4 - –ó–µ–ª—ë–Ω—ã–π\n5 - –§–∏–æ–ª–µ—Ç–æ–≤—ã–π\n6 - –ë–µ—Ä–µ–∑–æ–≤—ã–π\n7 - –ë–µ–ª—ã–π")
color_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞: ")
play_saund_colors(sound_color)
chosen_color = colors.get(color_choice, Fore.RESET)

# –°–∫–∏–Ω—ã –¥–ª—è –ø–æ–ª—è
skins = {
    "1": lambda: print(chosen_color +
        "  ‚ïî‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïó\n"
        f"  ‚ïë {board[0]} ‚ïë {board[1]} ‚ïë {board[2]} ‚ïë  \n"
        "  ‚ï†‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ï£\n"
        f"  ‚ïë {board[3]} ‚ïë {board[4]} ‚ïë {board[5]} ‚ïë \n"
        "  ‚ï†‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ï£\n"
        f"  ‚ïë {board[6]} ‚ïë {board[7]} ‚ïë {board[8]} ‚ïë \n"
        "  ‚ïö‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïù" + Fore.RESET
    ),
    "2": lambda: print(chosen_color +
        f"  {board[0]} | {board[1]} | {board[2]}\n"
        " ---+---+---\n"
        f"  {board[3]} | {board[4]} | {board[5]}\n"
        " ---+---+---\n"
        f"  {board[6]} | {board[7]} | {board[8]}" + Fore.RESET
    ),
    "3": lambda: print(chosen_color +
        f"üöÄ‚îÅ‚îÅ‚îÅüöÄ‚îÅ‚îÅ‚îÅüöÄ\n"
        f"‚îÉ {board[0]} ‚îÉ {board[1]} ‚îÉ {board[2]} ‚îÉ \n"
        f"üöÄ‚îÅ‚îÅ‚îÅüöÄ‚îÅ‚îÅ‚îÅüöÄ\n"
        f"‚îÉ {board[3]} ‚îÉ {board[4]} ‚îÉ {board[5]} ‚îÉ \n"
        f"üöÄ‚îÅ‚îÅ‚îÅüöÄ‚îÅ‚îÅ‚îÅüöÄ\n"
        f"‚îÉ {board[6]} ‚îÉ {board[7]} ‚îÉ {board[8]} ‚îÉ \n"
        f"üöÄ‚îÅ‚îÅ‚îÅüöÄ‚îÅ‚îÅ‚îÅüöÄ\n" + Fore.RESET
    ),
    "4": lambda: print(chosen_color +
        f"‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n"
        f"‚ñë {board[0]} ‚ñë {board[1]} ‚ñë {board[2]} ‚ñë \n"
        f"‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n"
        f"‚ñë {board[3]} ‚ñë {board[4]} ‚ñë {board[5]} ‚ñë \n"
        f"‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n"
        f"‚ñë {board[6]} ‚ñë {board[7]} ‚ñë {board[8]} ‚ñë \n"
        f"‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n" + Fore.RESET
    ),
    "5" : lambda: print(chosen_color +
        f"‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà\n"
        f"‚ñà {board[0]} ‚ñà {board[1]} ‚ñà {board[2]} ‚ñà \n"
        f"‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà\n"
        f"‚ñà {board[3]} ‚ñà {board[4]} ‚ñà {board[5]} ‚ñà \n"
        f"‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà\n"
        f"‚ñà {board[6]} ‚ñà {board[7]} ‚ñà {board[8]} ‚ñà \n"
        f"‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà\n" + Fore.RESET
    ),
    "0" : lambda: print(chosen_color +
        f"‚ï≠‚îÄ1‚îÄ‚î¨‚îÄ2‚îÄ‚î¨‚îÄ3‚îÄ‚ïÆ\n"
        f"‚îÇ {board[0]} ‚îÇ {board[1]} ‚îÇ {board[2]} ‚îÇ \n"
        f"‚îú‚îÄ4‚îÄ‚îº‚îÄ5‚îÄ‚îº‚îÄ6‚îÄ‚î§\n"
        f"‚îÇ {board[3]} ‚îÇ {board[4]} ‚îÇ {board[5]} ‚îÇ \n"
        f"‚îú‚îÄ7‚îÄ‚îº‚îÄ8‚îÄ‚îº‚îÄ9‚îÄ‚î§\n"
        f"‚îÇ {board[6]} ‚îÇ {board[7]} ‚îÇ {board[8]} ‚îÇ \n"
        f"‚ï∞‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚ïØ\n" + Fore.RESET
    ),
    "6" : lambda: print(chosen_color +
        f"‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã\n"
        f"‚îÇ {board[0]} ‚îÇ {board[1]} ‚îÇ {board[2]} ‚îÇ \n"
        f"‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã\n"
        f"‚îÇ {board[3]} ‚îÇ {board[4]} ‚îÇ {board[5]} ‚îÇ \n"
        f"‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã\n"
        f"‚îÇ {board[6]} ‚îÇ {board[7]} ‚îÇ {board[8]} ‚îÇ \n"
        f"‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚óã\n" + Fore.RESET
    ),
    "7" : lambda: print(chosen_color +
        f"‚ï±‚ï≤{board[0]}‚ï±‚ï≤{board[1]}‚ï±‚ï≤{board[2]}‚ï±‚ï≤\n"
        f"‚ï≤‚ï± ‚ï≤‚ï± ‚ï≤‚ï± ‚ï≤‚ï± \n"
        f"‚ï±‚ï≤{board[3]}‚ï±‚ï≤{board[4]}‚ï±‚ï≤{board[5]}‚ï±‚ï≤\n"
        f"‚ï≤‚ï± ‚ï≤‚ï± ‚ï≤‚ï± ‚ï≤‚ï± \n"
        f"‚ï±‚ï≤{board[6]}‚ï±‚ï≤{board[7]}‚ï±‚ï≤{board[8]}‚ï±‚ï≤\n"
        f"‚ï≤‚ï± ‚ï≤‚ï± ‚ï≤‚ï± ‚ï≤‚ï± \n" + Fore.RESET
    ),
    "8" : lambda: print(chosen_color +
        f"{board[0]}·õú{board[1]}·õù{board[2]}·õû \n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"·õü{board[3]}·õ†{board[4]}·õ°{board[5]}·õ¢ \n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"·õ£{board[6]}·õ§{board[7]}·õ•{board[8]}·õ¶ \n" + Fore.RESET
    )
}

for i in tqdm(range(40), desc="Open the skins", unit="iterations"):
    time.sleep(0.02)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
print("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –í—ã–±–æ—Ä —Å–∫–∏–Ω–∞
print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–Ω:\n0 - –°—Ç–∏–ª—å –ª–∞–±–∏—Ä–∏–Ω—Ç(–¥–ª—è –Ω–æ–≤–∞—á–∫–æ–≤) \n1 - –° —Ä–∞–º–∫–∞–º–∏\n2 - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n3 - –ö–æ—Å–º–∏—á–µ—Å–∫–∏–π\n4 - –°—Ç–∏–ª—å –ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç\n5 - –°—Ç–∏–ª—å –∫–∏—Ä–ø–∏—á–∏–∫–∏\n6 - –°—Ç–∏–ª—å –ø—É–∑—ã—Ä–∏\n7 - –°—Ç–∏–ª—å –ø–∞—É—Ç–∏–Ω–∞(—Ö–∞—Ä–¥)\n8 - –°—Ç–∏–ª—å –¥—Ä–µ–≤–Ω–∏–µ —Ä—É–Ω—ã(HELL)")
skin_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–∫–∏–Ω–∞: ")
play_saund_skins(sound_skin)
draw_board = skins.get(skin_choice, skins["2"])  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å–∫–∏–Ω



# if game_mode == "2":
#     bot = TicTacBot("O")

# bot = TicTacBot("O")
# human_palyer = "X"

turn = 0

while turn < 9:
    draw_board()
    player = "X" if turn % 2 == 0 else "O"
        
    if bot and player == "O":
        console = Console()

        with Progress(SpinnerColumn(), *Progress.get_default_columns(), console=console) as progress:
            task = progress.add_task("[cyan]–ë–æ—Ç –¥—É–º–∞–µ—Ç...", total=100)
            while not progress.finished:
                progress.update(task, advance=7)
                time.sleep(0.1)
        play_saund_o(sound_o)
        # print(f"{Fore.GREEN}–ë–æ—Ç –¥—É–º–∞–µ—Ç...{Fore.RESET}")
        move = bot.make_move(board)
    else:
        try:
            move = int(input(f"–ò–≥—Ä–æ–∫ {player}, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ (1-9): ")) - 1
            if player == "X":
                play_saund_x(sound_x)
            elif player == "O":
                play_saund_o(sound_o)
        except ValueError:
            print(Fore.RED + "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9." + Fore.RESET)
            continue

    if move is None or move < 0 or move > 8 or board[move] != " ": #move is None or
        print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥." + Fore.RESET)
        continue

    board[move] = player

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    for a, b, c in wins:
        if board[a] == board[b] == board[c] and board[a] != " ":
            draw_board()
            print(Fore.GREEN + f"–ò–≥—Ä–æ–∫ {player} –ø–æ–±–µ–¥–∏–ª!" + Fore.RESET)
            play_saund_win(sound_win)
            exit()

    turn += 1

draw_board()
print(Fore.CYAN + "–ù–∏—á—å—è!" + Fore.RESET)
play_saund_final(sound_gg)
